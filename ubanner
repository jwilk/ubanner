#!/usr/bin/env python3
# encoding=UTF-8

# Copyright © 2023-2024 Jakub Wilk <jwilk@jwilk.net>
# SPDX-License-Identifier: MIT

import argparse
import bisect
import itertools
import shutil
import signal
import sys

import cairo
import gi

gi.require_version('Pango', '1.0')
from gi.repository import Pango
gi.require_version('PangoCairo', '1.0')
from gi.repository import PangoCairo

0_0  # Python >= 3.6 is required

if sys.version_info < (3, 11):
    def kbisect(a, x, *, key):
        lo = 0
        hi = len(a)
        while lo < hi:
            mid = (lo + hi) // 2
            if x < key(a[mid]):
                hi = mid
            else:
                lo = mid + 1
        return lo
    bisect.bisect = kbisect

def pango_render(text, size=(76, 24), font=None, font_size=None):
    size = (size[0], size[1] * 2)
    surface = cairo.ImageSurface(cairo.FORMAT_A8, 1, 1)
    ctx = cairo.Context(surface)
    layout = PangoCairo.create_layout(ctx)
    layout.set_text(text, -1)
    font = Pango.FontDescription(font)
    def set_font_size(i):
        if i < 1:
            return False
        font.set_absolute_size(i)
        layout.set_font_description(font)
        wd, ht = layout.get_pixel_size()
        return wd > size[0] or ht > size[1]
    if font_size is None:
        i = bisect.bisect(range(size[1] * Pango.SCALE + 1), False, key=set_font_size) - 1
        if i < 1 or set_font_size(i):
            raise RuntimeError('could not render text')
    else:
        i = max(1, font_size * Pango.SCALE)
        set_font_size(i)
    wd, ht = layout.get_pixel_size()
    wd = min(wd, size[0])
    surface = cairo.ImageSurface(cairo.FORMAT_A8, wd, ht)
    ctx = cairo.Context(surface)
    PangoCairo.show_layout(ctx, layout)
    data = surface.get_data()
    stride = surface.get_stride()
    charset = ' ░▒█'
    cdiv = 512 // len(charset)
    for y in range(ht // 2):
        s = ''
        for x in range(wd):
            v = data[2 * y * stride + x] + data[(2 * y + 1) * stride + x]
            v //= cdiv
            s += charset[v]
        yield s.rstrip()

class default:
    font_size = 28

class act_list_fonts(argparse.Action):
    def __call__(self, *args, **kwargs):
        font_map = PangoCairo.font_map_get_default()
        for family in font_map.list_families():
            family_name = family.get_name()
            seen = set()
            for face in family.list_faces():
                descr = face.describe().to_string()
                if descr == family_name:
                    pass
                elif face.is_synthesized():
                    continue  # meh
                if descr in seen:
                    continue
                print(descr)
                seen.add(descr)
        sys.exit()

def main():
    signal.signal(signal.SIGPIPE, signal.SIG_DFL)
    ap = argparse.ArgumentParser()
    ap.add_argument('--list-fonts', nargs=0, action=act_list_fonts,
        help='print list of available font faces',
    )
    ap.add_argument('text', metavar='TEXT', nargs='*')
    ap.add_argument('--trim', action='store_true',
        help='trim leading/trailing empty lines',
    )
    ap.add_argument('--font', help='use this font face')
    ap.add_argument('--font-size', type=int, metavar='N', default=default.font_size,
        help=f'font size in pixels (default: {default.font_size})'
    )
    ap.add_argument('-s', '--full-screen', dest='font_size', action='store_const', const=None)
    opts = ap.parse_args()
    if not opts.text:
        if sys.stdin.isatty():
            ap.error('the TEXT argument is required when stdin is a tty')
        text = sys.stdin.read()
        text = text.rstrip('\n')
    else:
        text = str.join('\n', opts.text)
    size = shutil.get_terminal_size()
    lines = pango_render(text, size=size, font=opts.font, font_size=opts.font_size)
    if opts.trim:
        lines = list(itertools.dropwhile(''.__eq__, lines))
        while lines and not lines[-1]:
            lines.pop()
    for line in lines:
        print(line)

if __name__ == '__main__':
    main()

# vim:ts=4 sts=4 sw=4 et
